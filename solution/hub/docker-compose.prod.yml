version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hub_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-WebApiDb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - hub_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # .NET API Application
  hub_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hub_api_prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB:-WebApiDb};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD}
      - Jwt__SecretKey=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-HubApi}
      - Jwt__Audience=${JWT_AUDIENCE:-HubApiUsers}
      - Jwt__ExpirationMinutes=${JWT_EXPIRATION_MINUTES:-60}
      - Database__AutoMigrate=${DB_AUTO_MIGRATE:-true}
      - Database__EnsureCreated=${DB_ENSURE_CREATED:-false}
    ports:
      - "${API_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hub_network_prod
    restart: unless-stopped
    volumes:
      - hub_files_prod:/app/files
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data_prod:
    driver: local
  hub_files_prod:
    driver: local

networks:
  hub_network_prod:
    driver: bridge
services:
  hub:
    container_name: f1_hub
    build:
      context: ./hub
      dockerfile: Dockerfile.dev
    ports:
      - "9010:5000"
    volumes:
      - ./hub:/app
      - ./volumes/shared_files:/app/shared:rw
    env_file:
      - ./envs/.env.postgres
      - ./envs/.env.hub
    depends_on:
      - postgres
    networks:
      - f1_network

  react:
    container_name: f1_react
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "9999:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - ./envs/.env.frontend
    environment:
      - NODE_ENV=development
    networks:
      - f1_network
  postgres:
    image: postgres:14
    container_name: f1_postgres
    hostname: f1_postgres
    volumes:
      - ./volumes/postgres_data:/var/lib/postgresql/data
    env_file:
      - ./envs/.env.postgres
    networks:
      - f1_network
    ports:
      - "9040:5432"
    restart: "always"

  redis:
    image: redis:6.2-alpine
    container_name: f1_redis
    hostname: f1_redis
    ports:
      - "9050:6379"
    networks:
      - f1_network
    restart: "always"
  
  scraper-microservice:
    container_name: f1_scraper
    build:
      context: ./scraper
      dockerfile: Dockerfile
    restart: always
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      # Expone el puerto de la API en 9020 en tu m√°quina
      - "9020:8000"
    volumes:
      - ./scraper:/app
      - ./volumes/shared_files:/app/shared:rw
    depends_on:
      - postgres
      - redis
    env_file:
      - ./envs/.env.postgres
      - ./envs/.env.scraper
    networks:
      - f1_network

  celery-worker:
    container_name: f1_celery_worker
    build:
      context: ./scraper
      dockerfile: Dockerfile
    restart: always
    command: celery -A src.tasks:app worker --loglevel=info --concurrency=2
    volumes:
      - ./scraper:/app
      - ./volumes/shared_files:/app/shared:rw
    depends_on:
      - postgres
      - redis
    env_file:
      - ./envs/.env.postgres
      - ./envs/.env.celery
    networks:
      - f1_network

  notifier:
    container_name: f1_notifier
    build:
      context: ./notifier
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./notifier:/app
    depends_on:
      - redis
    env_file:
      - ./envs/.env.notifier
    networks:
      - f1_network


networks:
  f1_network:
    name: f1_network
    driver: bridge